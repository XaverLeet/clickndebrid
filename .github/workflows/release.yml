name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ github.ref_name }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ github.ref_name }}.zip
          asset_name: clickndebrid-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  docker-amd64:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-amd64
            type=ref,event=branch,suffix=-amd64

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-arm64:
    runs-on: ubuntu-24.04-arm
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-arm64
            type=ref,event=branch,suffix=-arm64

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [docker-amd64, docker-arm64]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          
      - name: Create and push multi-arch manifest
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Enable experimental Docker CLI features for manifest commands
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Using a completely different approach with Docker buildx
          # This avoids issues with manifest lists containing manifest lists
          
          echo "Creating and pushing manifest using buildx..."
          
          # Install Docker buildx if not already installed
          docker buildx --help > /dev/null || { 
            echo "Installing Docker buildx..."
            mkdir -p ~/.docker/cli-plugins/
            curl -sSL https://github.com/docker/buildx/releases/download/v0.12.0/buildx-v0.12.0.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
          }
          
          # Create a new builder instance
          docker buildx create --use --name multiarch-builder || docker buildx use multiarch-builder
          
          # Pull both architecture images
          echo "Pulling AMD64 image..."
          docker pull ghcr.io/${REPO}:${VERSION}-amd64 || { echo "AMD64 image not found"; exit 1; }
          
          echo "Pulling ARM64 image..."
          docker pull ghcr.io/${REPO}:${VERSION}-arm64 || { echo "ARM64 image not found"; exit 1; }
          
          # Tag AMD64 and ARM64 images with temporary tags
          docker tag ghcr.io/${REPO}:${VERSION}-amd64 ghcr.io/${REPO}:temp-amd64
          docker tag ghcr.io/${REPO}:${VERSION}-arm64 ghcr.io/${REPO}:temp-arm64
          
          # Push with the temporary tags
          docker push ghcr.io/${REPO}:temp-amd64
          docker push ghcr.io/${REPO}:temp-arm64
          
          # Use imagetools to create the manifest
          echo "Creating version manifest..."
          docker buildx imagetools create --tag ghcr.io/${REPO}:${VERSION} \
            ghcr.io/${REPO}:temp-amd64 \
            ghcr.io/${REPO}:temp-arm64
          
          echo "Creating latest manifest..."
          docker buildx imagetools create --tag ghcr.io/${REPO}:latest \
            ghcr.io/${REPO}:temp-amd64 \
            ghcr.io/${REPO}:temp-arm64
          
          # Clean up temporary tags
          echo "Cleaning up temporary tags..."
          docker rmi ghcr.io/${REPO}:temp-amd64 ghcr.io/${REPO}:temp-arm64
