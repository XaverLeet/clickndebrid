name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ github.ref_name }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ github.ref_name }}.zip
          asset_name: clickndebrid-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  docker-amd64:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-amd64
            type=ref,event=branch,suffix=-amd64

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-arm64:
    runs-on: ubuntu-24.04-arm
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-arm64
            type=ref,event=branch,suffix=-arm64

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [docker-amd64, docker-arm64]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          
      - name: Create and push multi-arch manifest
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Enable experimental Docker CLI features for manifest commands
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Using Docker manifest command directly which is designed for this purpose
          echo "Creating and pushing manifest using docker manifest..."
          
          # First attempt to directly access the images without pulling
          # This avoids potential architecture compatibility issues
          
          # Check if the images exist
          echo "Checking if images exist..."
          
          # Use manifest inspect to check if images exist without pulling
          echo "Checking AMD64 image..."
          if ! docker manifest inspect ghcr.io/${REPO}:${VERSION}-amd64 > /dev/null 2>&1; then
            echo "Error: AMD64 image not found"
            exit 1
          fi
          
          echo "Checking ARM64 image..."
          if ! docker manifest inspect ghcr.io/${REPO}:${VERSION}-arm64 > /dev/null 2>&1; then
            echo "Error: ARM64 image not found"
            exit 1
          fi
          
          # Create version manifest with --insecure option
          echo "Creating version manifest..."
          docker manifest create --insecure ghcr.io/${REPO}:${VERSION} \
            ghcr.io/${REPO}:${VERSION}-amd64 \
            ghcr.io/${REPO}:${VERSION}-arm64
          
          # Create latest manifest with --insecure option
          echo "Creating latest manifest..."
          docker manifest create --insecure ghcr.io/${REPO}:latest \
            ghcr.io/${REPO}:${VERSION}-amd64 \
            ghcr.io/${REPO}:${VERSION}-arm64
          
          # Annotate manifests
          echo "Annotating manifests..."
          docker manifest annotate --insecure ghcr.io/${REPO}:${VERSION} ghcr.io/${REPO}:${VERSION}-amd64 --os linux --arch amd64
          docker manifest annotate --insecure ghcr.io/${REPO}:${VERSION} ghcr.io/${REPO}:${VERSION}-arm64 --os linux --arch arm64
          docker manifest annotate --insecure ghcr.io/${REPO}:latest ghcr.io/${REPO}:${VERSION}-amd64 --os linux --arch amd64
          docker manifest annotate --insecure ghcr.io/${REPO}:latest ghcr.io/${REPO}:${VERSION}-arm64 --os linux --arch arm64
          
          # Push manifests with --insecure option
          echo "Pushing version manifest..."
          docker manifest push --insecure ghcr.io/${REPO}:${VERSION}
          
          echo "Pushing latest manifest..."
          docker manifest push --insecure ghcr.io/${REPO}:latest
