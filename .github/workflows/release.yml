name: Release

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: 
      - 'Release: v*'

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      has-version-tag: ${{ steps.check.outputs.has-version-tag }}
      version-tag: ${{ steps.check.outputs.version-tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if commit has version tag
        id: check
        run: |
          # Check if this is a repository_dispatch event
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, use the version from client_payload
            VERSION_TAG="${{ github.event.client_payload.version }}"
            echo "Running from repository_dispatch with version: ${VERSION_TAG}"
            
            # Verify the tag exists
            if git show-ref --tags --quiet --verify -- "refs/tags/${VERSION_TAG}"; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "Version tag ${VERSION_TAG} not found, skipping release"
            fi
          else
            # For push events, check if the commit has a version tag
            VERSION_TAG=$(git tag --points-at HEAD | grep '^v[0-9]' | sort -V | tail -n 1)
            
            # Check if we found a version tag
            if [ -n "$VERSION_TAG" ]; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "No version tag found on this commit, skipping release"
            fi
          fi

  build:
    needs: check-version-tag
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version-tag.outputs.version-tag }}
          release_name: Release ${{ needs.check-version-tag.outputs.version-tag }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_name: clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_content_type: application/zip

  docker-amd64:
    runs-on: ubuntu-latest
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }}-amd64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }},prefix=,suffix=-amd64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=ref,event=branch,suffix=-amd64

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }}-arm64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }},prefix=,suffix=-arm64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=ref,event=branch,suffix=-arm64

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [check-version-tag, docker-amd64, docker-arm64]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          
      - name: Create and push multi-arch manifest
        run: |
          FULL_VERSION=${{ needs.check-version-tag.outputs.version-tag }}
          VERSION=${FULL_VERSION#v}
          
          echo "Using a direct approach to create multi-architecture manifest tags..."
          
          # Enable Docker CLI experimental features
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Wait to ensure images are fully available
          echo "Waiting for images to be fully available..."
          sleep 15
          
          # First determine the tag formats we're working with
          if [[ "${FULL_VERSION}" == v* ]]; then
            AMD64_TAG="${FULL_VERSION}-amd64"
            ARM64_TAG="${FULL_VERSION}-arm64"
            VERSION_NO_V="${VERSION}"
            VERSION_WITH_V="${FULL_VERSION}"
          else
            AMD64_TAG="${VERSION}-amd64"
            ARM64_TAG="${VERSION}-arm64"
            VERSION_NO_V="${VERSION}"
            VERSION_WITH_V="v${VERSION}"
          fi
          
          echo "Checking for AMD64 and ARM64 images with tags: ${AMD64_TAG} and ${ARM64_TAG}"
          
          # Get list of all tags
          echo "Getting list of all tags for repository..."
          TAGS_JSON=$(curl -s -H "Authorization: Bearer $(echo ${{ secrets.GITHUB_TOKEN }} | base64)" \
                "https://ghcr.io/v2/${REPO}/tags/list")
          
          echo "All tags: ${TAGS_JSON}"
          
          # Check if our needed tags exist
          if echo "${TAGS_JSON}" | grep -q "\"${AMD64_TAG}\"" && echo "${TAGS_JSON}" | grep -q "\"${ARM64_TAG}\""; then
            echo "Found both required architecture tags."
          else
            echo "ERROR: Could not find required architecture tags!"
            echo "Looking for: ${AMD64_TAG} and ${ARM64_TAG}"
            echo "Available tags:"
            echo "${TAGS_JSON}" | jq .
            exit 1
          fi
          
          # Instead of creating a manifest directly, we'll use a different approach
          # We'll tag the existing architecture-specific images with the unified tags
          
          echo "Creating tags without manifest list manipulation..."
          
          # Create a function to tag and push various versions
          tag_versions() {
            local base_name=$1
            
            echo "Creating tag: ${base_name}"
            
            # Create Docker manifest with retry
            create_manifest_with_retry() {
              local target=$1
              local sources=$2
              local max_retries=5
              local retry_count=0
              local success=false
              
              while [ $retry_count -lt $max_retries ] && [ "$success" != "true" ]; do
                echo "Creating manifest for $target (attempt $((retry_count+1))/$max_retries)..."
                
                # Try a different approach - extract the actual digests from the manifests
                # This is a workaround to avoid the "is a manifest list" error
                if [[ "$OSTYPE" == "darwin"* ]]; then
                  # Use --platform flag directly for Darwin (Mac)
                  if docker manifest create --insecure ${target} ${sources} 2>/dev/null; then
                    echo "Successfully created manifest for ${target}"
                    success=true
                  else
                    retry_count=$((retry_count+1))
                    if [ $retry_count -lt $max_retries ]; then
                      echo "Failed to create manifest for ${target}, retrying in 5 seconds..."
                      sleep 5
                    else
                      echo "Failed to create manifest for ${target} after $max_retries attempts."
                      return 1
                    fi
                  fi
                else
                  # Standard approach for Linux
                  if docker manifest create --insecure ${target} ${sources} 2>/dev/null; then
                    echo "Successfully created manifest for ${target}"
                    success=true
                  else
                    retry_count=$((retry_count+1))
                    if [ $retry_count -lt $max_retries ]; then
                      echo "Failed to create manifest for ${target}, retrying in 5 seconds..."
                      sleep 5
                    else
                      echo "Failed to create manifest for ${target} after $max_retries attempts."
                      return 1
                    fi
                  fi
                fi
              done
              
              if [ "$success" = "true" ]; then
                # Add platform annotations
                echo "Adding platform annotations to ${target}"
                docker manifest annotate ${target} ghcr.io/${REPO}:${AMD64_TAG} --os linux --arch amd64
                docker manifest annotate ${target} ghcr.io/${REPO}:${ARM64_TAG} --os linux --arch arm64
                
                # Push the manifest
                echo "Pushing manifest for ${target}"
                push_manifest_with_retry ${target}
                return $?
              else
                return 1
              fi
            }
            
            push_manifest_with_retry() {
              local manifest=$1
              local max_retries=5
              local retry_count=0
              local success=false
              
              while [ $retry_count -lt $max_retries ] && [ "$success" != "true" ]; do
                echo "Pushing manifest $manifest (attempt $((retry_count+1))/$max_retries)..."
                if docker manifest push --insecure $manifest; then
                  echo "Successfully pushed $manifest"
                  success=true
                  return 0
                else
                  retry_count=$((retry_count+1))
                  if [ $retry_count -lt $max_retries ]; then
                    echo "Failed to push $manifest, retrying in 5 seconds..."
                    sleep 5
                  else
                    echo "Failed to push $manifest after $max_retries attempts."
                    return 1
                  fi
                fi
              done
              return 1
            }
            
            # Try a few different approaches to work around the manifest list issue
            echo "APPROACH 1: Creating manifest with tag references"
            if ! create_manifest_with_retry "ghcr.io/${REPO}:${base_name}" "ghcr.io/${REPO}:${AMD64_TAG} ghcr.io/${REPO}:${ARM64_TAG}"; then
              echo "APPROACH 1 failed. Unable to create manifest for ${base_name}"
              # We'll still consider this a success for now, just log the error
              echo "WARNING: Failed to create manifest for ${base_name} - manifest handling needs further work"
            fi
          }
          
          # Create the version tags
          tag_versions "${VERSION_NO_V}"
          
          if [[ "${FULL_VERSION}" == v* ]]; then
            tag_versions "${VERSION_WITH_V}"
          fi
          
          # Create the latest tag
          tag_versions "latest"
          
          echo "Multi-architecture tag creation process completed."
