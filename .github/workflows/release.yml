name: Release

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: 
      - 'Release: v*'

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      has-version-tag: ${{ steps.check.outputs.has-version-tag }}
      version-tag: ${{ steps.check.outputs.version-tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if commit has version tag
        id: check
        run: |
          # Check if this is a repository_dispatch event
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, use the version from client_payload
            VERSION_TAG="${{ github.event.client_payload.version }}"
            echo "Running from repository_dispatch with version: ${VERSION_TAG}"
            
            # Verify the tag exists
            if git show-ref --tags --quiet --verify -- "refs/tags/${VERSION_TAG}"; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "Version tag ${VERSION_TAG} not found, skipping release"
            fi
          else
            # For push events, check if the commit has a version tag
            VERSION_TAG=$(git tag --points-at HEAD | grep '^v[0-9]' | sort -V | tail -n 1)
            
            # Check if we found a version tag
            if [ -n "$VERSION_TAG" ]; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "No version tag found on this commit, skipping release"
            fi
          fi

  build:
    needs: check-version-tag
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version-tag.outputs.version-tag }}
          release_name: Release ${{ needs.check-version-tag.outputs.version-tag }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_name: clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_content_type: application/zip

  docker-amd64:
    runs-on: ubuntu-latest
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }}-amd64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }},prefix=,suffix=-amd64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=ref,event=branch,suffix=-amd64

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }}-arm64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=raw,value=${{ needs.check-version-tag.outputs.version-tag }},prefix=,suffix=-arm64,enable=${{ startsWith(needs.check-version-tag.outputs.version-tag, 'v') }}
            type=ref,event=branch,suffix=-arm64

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [check-version-tag, docker-amd64, docker-arm64]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          
      - name: Create and push multi-arch manifest
        run: |
          FULL_VERSION=${{ needs.check-version-tag.outputs.version-tag }}
          VERSION=${FULL_VERSION#v}
          
          # Use docker manifest command directly which is simpler and has better error handling
          echo "Using Docker manifest command to create multi-architecture manifests..."
          
          # Enable Docker CLI experimental features
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Wait a moment to ensure images are fully available
          echo "Waiting for images to be fully available..."
          sleep 15
          
          # First check if the images exist with the full version tag (including v)
          echo "Checking for images with tag: ${FULL_VERSION}-amd64 and ${FULL_VERSION}-arm64"
          
          # Try pulling with the full version tag (including v)
          AMD64_TAG="${FULL_VERSION}-amd64"
          ARM64_TAG="${FULL_VERSION}-arm64"
          
          AMD64_FOUND=false
          ARM64_FOUND=false
          
          # Check if AMD64 image exists with FULL_VERSION tag
          if docker manifest inspect ghcr.io/${REPO}:${AMD64_TAG} >/dev/null 2>&1; then
            echo "Found AMD64 image with tag: ${AMD64_TAG}"
            AMD64_FOUND=true
          else
            echo "AMD64 image not found with tag: ${AMD64_TAG}, checking alternate format..."
            # Check with version without 'v' prefix
            if docker manifest inspect ghcr.io/${REPO}:${VERSION}-amd64 >/dev/null 2>&1; then
              echo "Found AMD64 image with tag: ${VERSION}-amd64"
              AMD64_TAG="${VERSION}-amd64"
              AMD64_FOUND=true
            fi
          fi
          
          # Check if ARM64 image exists with FULL_VERSION tag
          if docker manifest inspect ghcr.io/${REPO}:${ARM64_TAG} >/dev/null 2>&1; then
            echo "Found ARM64 image with tag: ${ARM64_TAG}"
            ARM64_FOUND=true
          else
            echo "ARM64 image not found with tag: ${ARM64_TAG}, checking alternate format..."
            # Check with version without 'v' prefix
            if docker manifest inspect ghcr.io/${REPO}:${VERSION}-arm64 >/dev/null 2>&1; then
              echo "Found ARM64 image with tag: ${VERSION}-arm64"
              ARM64_TAG="${VERSION}-arm64"
              ARM64_FOUND=true
            fi
          fi
          
          # If images aren't found with either format, list available tags and exit
          if [ "$AMD64_FOUND" != "true" ] || [ "$ARM64_FOUND" != "true" ]; then
            echo "Could not find required architecture images!"
            echo "Available tags:"
            curl -s -H "Authorization: Bearer $(echo ${{ secrets.GITHUB_TOKEN }} | base64)" \
                 "https://ghcr.io/v2/${REPO}/tags/list" | jq .
            exit 1
          fi
          
          # Pull the images to ensure they're in the local cache
          echo "Pulling AMD64 image with tag: ${AMD64_TAG}..."
          docker pull ghcr.io/${REPO}:${AMD64_TAG}
          
          echo "Pulling ARM64 image with tag: ${ARM64_TAG}..."
          docker pull ghcr.io/${REPO}:${ARM64_TAG}
          
          # Create the version manifest (with and without v prefix)
          echo "Creating version manifest for ${VERSION}..."
          docker manifest create ghcr.io/${REPO}:${VERSION} \
            --amend \
            ghcr.io/${REPO}:${AMD64_TAG} \
            ghcr.io/${REPO}:${ARM64_TAG}
          
          # Also create a manifest with the full version tag if it starts with v
          if [[ "${FULL_VERSION}" == v* ]]; then
            echo "Creating version manifest for ${FULL_VERSION}..."
            docker manifest create ghcr.io/${REPO}:${FULL_VERSION} \
              --amend \
              ghcr.io/${REPO}:${AMD64_TAG} \
              ghcr.io/${REPO}:${ARM64_TAG}
          fi
          
          # Create the latest manifest
          echo "Creating latest manifest..."
          docker manifest create ghcr.io/${REPO}:latest \
            --amend \
            ghcr.io/${REPO}:${AMD64_TAG} \
            ghcr.io/${REPO}:${ARM64_TAG}
          
          # Add platform annotations to the manifests
          echo "Adding platform annotations..."
          docker manifest annotate ghcr.io/${REPO}:${VERSION} ghcr.io/${REPO}:${AMD64_TAG} --os linux --arch amd64
          docker manifest annotate ghcr.io/${REPO}:${VERSION} ghcr.io/${REPO}:${ARM64_TAG} --os linux --arch arm64
          
          # Also annotate the manifest with the full version tag if it starts with v
          if [[ "${FULL_VERSION}" == v* ]]; then
            docker manifest annotate ghcr.io/${REPO}:${FULL_VERSION} ghcr.io/${REPO}:${AMD64_TAG} --os linux --arch amd64
            docker manifest annotate ghcr.io/${REPO}:${FULL_VERSION} ghcr.io/${REPO}:${ARM64_TAG} --os linux --arch arm64
          fi
          
          docker manifest annotate ghcr.io/${REPO}:latest ghcr.io/${REPO}:${AMD64_TAG} --os linux --arch amd64
          docker manifest annotate ghcr.io/${REPO}:latest ghcr.io/${REPO}:${ARM64_TAG} --os linux --arch arm64
          
          # Push the manifests
          echo "Pushing manifests..."
          docker manifest push ghcr.io/${REPO}:${VERSION}
          
          # Push the manifest with the full version tag if it starts with v
          if [[ "${FULL_VERSION}" == v* ]]; then
            docker manifest push ghcr.io/${REPO}:${FULL_VERSION}
          fi
          
          docker manifest push ghcr.io/${REPO}:latest
          
          echo "Multi-architecture manifests created successfully!"
