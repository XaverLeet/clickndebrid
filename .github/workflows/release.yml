name: Release

on:
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - "Release: v*"

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      has-version-tag: ${{ steps.check.outputs.has-version-tag }}
      version-tag: ${{ steps.check.outputs.version-tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if commit has version tag
        id: check
        run: |
          # Check if this is a repository_dispatch event
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, use the version from client_payload
            VERSION_TAG="${{ github.event.client_payload.version }}"
            echo "Running from repository_dispatch with version: ${VERSION_TAG}"
            
            # Verify the tag exists
            if git show-ref --tags --quiet --verify -- "refs/tags/${VERSION_TAG}"; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "Version tag ${VERSION_TAG} not found, skipping release"
            fi
          else
            # For push events, check if the commit has a version tag
            VERSION_TAG=$(git tag --points-at HEAD | grep '^v[0-9]' | sort -V | tail -n 1)
            
            # Check if we found a version tag
            if [ -n "$VERSION_TAG" ]; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "No version tag found on this commit, skipping release"
            fi
          fi

  build:
    needs: check-version-tag
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version-tag.outputs.version-tag }}
          release_name: Release ${{ needs.check-version-tag.outputs.version-tag }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_name: clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_content_type: application/zip

  # Trigger Docker image builds
  trigger-docker-builds:
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Trigger AMD64 build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          event-type: build-docker-amd64
          client-payload: '{"version": "${{ needs.check-version-tag.outputs.version-tag }}"}'

      - name: Trigger ARM64 build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          event-type: build-docker-arm64
          client-payload: '{"version": "${{ needs.check-version-tag.outputs.version-tag }}"}'
