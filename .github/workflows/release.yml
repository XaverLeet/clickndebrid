name: Release

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: 
      - 'Release: v*'

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      has-version-tag: ${{ steps.check.outputs.has-version-tag }}
      version-tag: ${{ steps.check.outputs.version-tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if commit has version tag
        id: check
        run: |
          # Check if this is a repository_dispatch event
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, use the version from client_payload
            VERSION_TAG="${{ github.event.client_payload.version }}"
            echo "Running from repository_dispatch with version: ${VERSION_TAG}"
            
            # Verify the tag exists
            if git show-ref --tags --quiet --verify -- "refs/tags/${VERSION_TAG}"; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "Version tag ${VERSION_TAG} not found, skipping release"
            fi
          else
            # For push events, check if the commit has a version tag
            VERSION_TAG=$(git tag --points-at HEAD | grep '^v[0-9]' | sort -V | tail -n 1)
            
            # Check if we found a version tag
            if [ -n "$VERSION_TAG" ]; then
              echo "has-version-tag=true" >> $GITHUB_OUTPUT
              echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
              echo "Found version tag: ${VERSION_TAG}, proceeding with release"
            else
              echo "has-version-tag=false" >> $GITHUB_OUTPUT
              echo "No version tag found on this commit, skipping release"
            fi
          fi

  build:
    needs: check-version-tag
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version-tag.outputs.version-tag }}
          release_name: Release ${{ needs.check-version-tag.outputs.version-tag }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Zip release files
        run: |
          mkdir -p release
          cp -r dist package.json package-lock.json README.md LICENSE CHANGELOG.md release/
          # Check if .env.example exists before copying
          if [ -f .env.example ]; then
            cp .env.example release/
          fi
          cd release
          zip -r ../clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_name: clickndebrid-${{ needs.check-version-tag.outputs.version-tag }}.zip
          asset_content_type: application/zip

  docker-amd64:
    runs-on: ubuntu-latest
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-amd64
            type=ref,event=branch,suffix=-amd64

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [check-version-tag, build]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}-arm64
            type=ref,event=branch,suffix=-arm64

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [check-version-tag, docker-amd64, docker-arm64]
    if: needs.check-version-tag.outputs.has-version-tag == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          
      - name: Create and push multi-arch manifest
        run: |
          VERSION=${{ needs.check-version-tag.outputs.version-tag }}
          VERSION=${VERSION#v}
          
          # Let's utilize GitHub Container Registry API via curl to create and update tags
          # This avoids Docker manifest issues completely
          
          echo "Using Container Registry API to create multi-architecture tags..."
          
          # Extract the required token from the Docker config
          TOKEN=$(jq -r '.auths["ghcr.io"].auth' ~/.docker/config.json | base64 -d | cut -d: -f2)
          
          # Verify we have a token
          if [ -z "$TOKEN" ]; then
            echo "Error: Could not extract token for ghcr.io"
            exit 1
          fi
          
          # Function to retag an image
          retag_image() {
            local source_tag="$1"
            local target_tag="$2"
            
            echo "Retagging $source_tag to $target_tag"
            
            # Get the manifest of the source image
            echo "Getting manifest for $source_tag"
            MANIFEST=$(curl -s -H "Authorization: Bearer $TOKEN" \
                            -H "Accept: application/vnd.oci.image.manifest.v1+json" \
                            https://ghcr.io/v2/${REPO}/manifests/$source_tag)
            
            if [ -z "$MANIFEST" ] || echo "$MANIFEST" | grep -q "error"; then
              echo "Error: Failed to get manifest for $source_tag"
              echo "$MANIFEST"
              return 1
            fi
            
            # Put the manifest to the target tag
            echo "Putting manifest to $target_tag"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
                             -X PUT \
                             -H "Authorization: Bearer $TOKEN" \
                             -H "Content-Type: application/vnd.oci.image.manifest.v1+json" \
                             -d "$MANIFEST" \
                             https://ghcr.io/v2/${REPO}/manifests/$target_tag)
            
            if [ "$HTTP_CODE" -ne 201 ]; then
              echo "Error: Failed to put manifest for $target_tag, HTTP code: $HTTP_CODE"
              return 1
            fi
            
            echo "Successfully retagged $source_tag to $target_tag"
            return 0
          }
          
          # Check if amd64 and arm64 images exist
          echo "Checking if images exist..."
          
          for arch in "amd64" "arm64"; do
            IMAGE_TAG="${VERSION}-${arch}"
            echo "Checking $IMAGE_TAG image..."
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
                             -H "Authorization: Bearer $TOKEN" \
                             -H "Accept: application/vnd.oci.image.manifest.v1+json" \
                             https://ghcr.io/v2/${REPO}/manifests/$IMAGE_TAG)
            
            if [ "$HTTP_CODE" -ne 200 ]; then
              echo "Error: $arch image not found (HTTP $HTTP_CODE)"
              exit 1
            fi
          done
          
          # Create version tag
          echo "Creating version tag $VERSION..."
          if ! retag_image "${VERSION}-amd64" "$VERSION"; then
            echo "Failed to create version tag"
            exit 1
          fi
          
          # Create latest tag
          echo "Creating latest tag..."
          if ! retag_image "${VERSION}-amd64" "latest"; then
            echo "Failed to create latest tag"
            exit 1
          fi
          
          echo "Multi-architecture tags created successfully!"
