name: CI

on:
  push:
    branches: [develop]
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build
        
  sync-to-main:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      
      - name: Sync develop to main
        run: |
          echo "Checking out main branch..."
          git checkout main
          
          echo "Merging develop branch into main..."
          git merge --no-ff origin/develop -m "ci: merge develop into main for release ${{ github.ref_name }}"
          
          echo "Pushing changes to main..."
          git push origin main
          
          echo "Successfully synced develop to main for release ${{ github.ref_name }}"
      
      - name: Trigger release workflow
        run: |
          # Extract version from tag (e.g., "v1.2.3" -> "1.2.3")
          VERSION="${{ github.ref_name }}"
          VERSION_NUMBER=${VERSION#v}
          
          echo "Triggering release workflow for version $VERSION on main branch"
          
          # Create a repository dispatch event to trigger the release workflow
          # Note: REPO_ACCESS_TOKEN must be created as a repository secret with workflow permissions
          # The default GITHUB_TOKEN doesn't have permission to trigger workflows
          curl -X POST \
            -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "manual-release", "client_payload": {"version": "'"$VERSION"'"}}'
