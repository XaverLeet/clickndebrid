name: Update Main Branch

# This workflow is designed to update the main branch with tagged releases
# It should only run when tags are created from the develop branch

on:
  push:
    tags:
      - "v*" # This will trigger on any tag starting with 'v'

# Add permissions to allow the workflow to push to the repository
permissions:
  contents: write

jobs:
  update-main:
    runs-on: ubuntu-latest
    # Wait for tag-release workflow to complete
    needs: []

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for GitVersion

      - name: Verify tag is from develop branch
        id: verify-branch
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG_NAME"

          # Get the commit that the tag points to
          TAG_COMMIT=$(git rev-list -n 1 $TAG_NAME)
          echo "Tag commit: $TAG_COMMIT"

          # Find what branch this commit belongs to
          BRANCH_NAME=$(git branch -r --contains $TAG_COMMIT | grep -v "HEAD" | sed 's/^[[:space:]]*origin\///' | head -n 1)
          echo "Branch: $BRANCH_NAME"

          # Check if the branch is develop
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            echo "✅ Tag was created from develop branch"
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Tag was NOT created from develop branch"
            echo "⚠️ Workflow will exit without updating main branch"
            echo "continue=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      # Only proceed if the tag was created from develop branch
      - name: Checkout main branch
        if: steps.verify-branch.outputs.continue == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for GitVersion
          ref: main

      - name: Setup Git
        if: steps.verify-branch.outputs.continue == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@users.noreply.github.com'

      - name: Get tag information
        if: steps.verify-branch.outputs.continue == 'true'
        id: tag-info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Triggered by tag: $TAG_NAME"

          # Check if this is a prerelease tag (contains dash)
          if [[ "$TAG_NAME" == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease tag (contains '-')"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a release tag (no '-')"
          fi

          # Get tag's commit reference
          TAG_COMMIT=$(git rev-list -n 1 $TAG_NAME)
          echo "tag_commit=$TAG_COMMIT" >> $GITHUB_OUTPUT
          echo "Tag commit: $TAG_COMMIT"

      - name: Check if release exists
        if: steps.verify-branch.outputs.continue == 'true'
        id: check-releases
        run: |
          # Count stable releases (no dash in tag name)
          RELEASE_COUNT=$(git tag -l 'v*' | grep -v '-' | wc -l)
          echo "release_count=$RELEASE_COUNT" >> $GITHUB_OUTPUT
          echo "Number of stable releases: $RELEASE_COUNT"

      - name: Update main branch to tag
        if: steps.verify-branch.outputs.continue == 'true'
        run: |
          # Logic to update main branch:
          # 1. Always update if this is a stable release (no dash)
          # 2. Update for prereleases only if there are no stable releases yet

          if [[ "${{ steps.tag-info.outputs.is_prerelease }}" == "false" ]] || [[ "${{ steps.check-releases.outputs.release_count }}" == "0" ]]; then
            echo "Updating main branch to tag: ${{ steps.tag-info.outputs.tag_name }}"

            # Get current state of main
            MAIN_COMMIT=$(git rev-parse HEAD)
            echo "Current main commit: $MAIN_COMMIT"

            # Update main to the tag's commit
            git reset --hard ${{ steps.tag-info.outputs.tag_commit }}
            echo "Reset main to tag commit: ${{ steps.tag-info.outputs.tag_commit }}"

            # Push changes to main using PAT for full permissions
            # Using PAT_TOKEN which needs to be added as a repository secret
            git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin main --force
            echo "Main branch updated to ${{ steps.tag-info.outputs.tag_name }}"
          else
            echo "Skipping main branch update: current tag is a prerelease and stable releases already exist"
          fi

      - name: Display update summary
        if: steps.verify-branch.outputs.continue == 'true'
        run: |
          echo "✅ Main branch update process completed"
          if [[ "${{ steps.tag-info.outputs.is_prerelease }}" == "false" ]] || [[ "${{ steps.check-releases.outputs.release_count }}" == "0" ]]; then
            echo "Main branch was updated to ${{ steps.tag-info.outputs.tag_name }}"
          else
            echo "Main branch was NOT updated (prerelease with existing stable releases)"
          fi
          echo ""
          echo "GitHub Release creation is handled by tag-release.yml workflow"

      - name: Message for non-develop tags
        if: steps.verify-branch.outputs.continue != 'true'
        run: |
          echo "⚠️ Update Main Branch workflow did not proceed"
          echo "This tag was not created from the develop branch"
          echo "The main branch was NOT updated"
