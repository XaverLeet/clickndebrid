name: Docker Build and Push

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.2.3 or latest)'
        required: true
        default: 'latest'
      push:
        description: 'Push to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  gitversion:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
      full-version: ${{ steps.gitversion.outputs.FullSemVer }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Check if prerelease
        id: check-prerelease
        run: |
          if [[ "${{ steps.gitversion.outputs.SemVer }}" == *"-"* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [gitversion]
    if: always() && (needs.gitversion.result == 'success' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # for security scanning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with version for tagged releases
            type=ref,event=tag
            # Tag with GitVersion calculated version for main/develop pushes
            type=raw,value=${{ needs.gitversion.outputs.version }},enable=${{ github.event_name == 'push' && needs.gitversion.outputs.version != '' }}
            # Tag with version from workflow_dispatch
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}
            # Tag with 'latest' for main branch releases only
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && needs.gitversion.outputs.is-prerelease == 'false' }}
            # Tag with 'edge' for develop branch
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}
            # Tag with short commit SHA for PRs
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'pull_request' }}
          labels: |
            org.opencontainers.image.title=ClicknDebrid
            org.opencontainers.image.description=Click'n'Load proxy server with debrid service integration
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ needs.gitversion.outputs.version || github.event.inputs.version || 'unknown' }}
            org.label-schema.version=${{ needs.gitversion.outputs.version || github.event.inputs.version || 'unknown' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push != 'false') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false # Avoid issues with multi-platform builds
          build-args: |
            VERSION=${{ needs.gitversion.outputs.version || github.event.inputs.version || 'dev' }}

      - name: Generate build summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Built Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.gitversion.outputs.version }}" != "" ]]; then
            echo "**GitVersion:** ${{ needs.gitversion.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Full Version:** ${{ needs.gitversion.outputs.full-version }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags Created:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "**✅ Images pushed to registry**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**🔧 PR build - images not pushed**" >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'