name: Docker Manifest Builder

on:
  repository_dispatch:
    types: [docker-manifest-check]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to check and build manifest for'
        required: true
        default: ''
      wait_for_builds:
        description: 'Wait for builds to complete'
        required: false
        default: 'true'
        type: boolean

jobs:
  monitor-build-status:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      amd64-status: ${{ steps.final-check.outputs.amd64-status }}
      arm64-status: ${{ steps.final-check.outputs.arm64-status }}
      version: ${{ steps.final-check.outputs.version }}
      ready: ${{ steps.final-check.outputs.ready }}
    
    strategy:
      max-parallel: 1 
      matrix:
        check_iteration: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        
    steps:
      - name: Set initial variables
        id: init
        run: |
          VERSION=""
          
          # Get version from workflow inputs or payload
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" == "repository_dispatch" ] && [ -n "${{ github.event.client_payload.version }}" ]; then
            VERSION="${{ github.event.client_payload.version }}"
          fi
          
          echo "iteration=${{ matrix.check_iteration }}" >> $GITHUB_OUTPUT
          if [ -n "$VERSION" ]; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
          
          # Wait 2 minutes between checks for iteration > 1
          if [ ${{ matrix.check_iteration }} -gt 1 ]; then
            echo "Waiting 120 seconds before check iteration ${{ matrix.check_iteration }}..."
            sleep 120
          fi

      - name: Download build status artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-build-status
          path: build-status
        continue-on-error: true
      
      - name: Check build status
        id: check
        run: |
          # Set default values
          AMD64_STATUS="pending"
          ARM64_STATUS="pending"
          VERSION="${{ steps.init.outputs.version }}"
          READY="false"
          
          # Debug info
          echo "Event name: ${{ github.event_name }}"
          echo "Check iteration: ${{ matrix.check_iteration }} of 15"
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Event action: ${{ github.event.action }}"
            echo "Client payload version: ${{ github.event.client_payload.version }}"
          fi
          
          # Debug downloaded artifacts
          echo "Checking downloaded build status artifacts:"
          mkdir -p build-status
          ls -la build-status/ || echo "No files found in build-status directory"
          
          # Check AMD64 build status
          if [ -f build-status/amd64-complete ]; then
            AMD64_STATUS="success"
            AMD64_VERSION=$(cat build-status/amd64-complete)
            echo "AMD64 build is complete (version: $AMD64_VERSION)"
            if [ -f build-status/amd64-timestamp ]; then
              echo "AMD64 build completed at: $(cat build-status/amd64-timestamp)"
            fi
            
            # If VERSION isn't set yet, use this one
            if [ -z "$VERSION" ]; then
              VERSION="$AMD64_VERSION"
              echo "Setting version from AMD64 build: $VERSION"
            fi
          else
            echo "AMD64 build is not complete (iteration ${{ matrix.check_iteration }})"
          fi

          # Check ARM64 build status
          if [ -f build-status/arm64-complete ]; then
            ARM64_STATUS="success"
            ARM64_VERSION=$(cat build-status/arm64-complete)
            echo "ARM64 build is complete (version: $ARM64_VERSION)"
            if [ -f build-status/arm64-timestamp ]; then
              echo "ARM64 build completed at: $(cat build-status/arm64-timestamp)"
            fi
            
            # If VERSION isn't set yet, use this one
            if [ -z "$VERSION" ]; then
              VERSION="$ARM64_VERSION"
              echo "Setting version from ARM64 build: $VERSION"
            fi
          else
            echo "ARM64 build is not complete (iteration ${{ matrix.check_iteration }})"
          fi
          
          # Determine if we're ready to build the manifest
          if [ "$AMD64_STATUS" == "success" ] && [ "$ARM64_STATUS" == "success" ]; then
            echo "Both architectures are ready for version $VERSION, can proceed with manifest creation"
            READY="true"
          fi
          
          # Skip further iterations if we're ready
          if [ "$READY" == "true" ]; then
            echo "cancel-further-iterations=true" >> $GITHUB_OUTPUT
          elif [ ${{ matrix.check_iteration }} -ge 15 ]; then
            echo "Reached maximum number of check iterations, giving up"
          else
            echo "Will continue checking in next iteration"
          fi
          
          # Output the results
          echo "amd64-status=$AMD64_STATUS" >> $GITHUB_OUTPUT
          echo "arm64-status=$ARM64_STATUS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ready=$READY" >> $GITHUB_OUTPUT
      
      # Cancel all remaining matrix jobs if we're ready or if requested
      - name: Cancel remaining matrix jobs
        if: steps.check.outputs.ready == 'true' || steps.check.outputs.cancel-further-iterations == 'true'
        uses: andymckay/cancel-action@0.2
        with:
          cancel-workflow: false
          branch: ${{ github.ref }}
      
      # This step runs only on the last iteration or if we're ready
      - name: Final status check
        id: final-check
        if: matrix.check_iteration == 15 || steps.check.outputs.ready == 'true'
        run: |
          echo "This is the final status check"
          echo "AMD64 status: ${{ steps.check.outputs.amd64-status }}"
          echo "ARM64 status: ${{ steps.check.outputs.arm64-status }}"
          echo "Version: ${{ steps.check.outputs.version }}"
          echo "Ready: ${{ steps.check.outputs.ready }}"
          
          # Pass outputs to the next job
          echo "amd64-status=${{ steps.check.outputs.amd64-status }}" >> $GITHUB_OUTPUT
          echo "arm64-status=${{ steps.check.outputs.arm64-status }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.check.outputs.version }}" >> $GITHUB_OUTPUT
          echo "ready=${{ steps.check.outputs.ready }}" >> $GITHUB_OUTPUT

  create-manifest:
    needs: monitor-build-status
    if: needs.monitor-build-status.outputs.ready == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          VERSION="${{ needs.monitor-build-status.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION_NO_V=${VERSION_NO_V}" >> $GITHUB_ENV
          
          # Debug information
          echo "Ready to create manifest: ${{ needs.monitor-build-status.outputs.ready }}"
          echo "AMD64 status: ${{ needs.monitor-build-status.outputs.amd64-status }}"
          echo "ARM64 status: ${{ needs.monitor-build-status.outputs.arm64-status }}"
          echo "Version: ${{ needs.monitor-build-status.outputs.version }}"

      - name: Create and push Docker manifest
        run: |
          # Enable Docker CLI experimental features
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Verify that images exist before creating the manifest
          verify_image_exists() {
            local IMAGE_TAG=$1
            echo "Verifying image exists: ghcr.io/${REPO}:${IMAGE_TAG}"
            
              # First check if the image exists locally
            if docker image inspect ghcr.io/${REPO}:${IMAGE_TAG} &>/dev/null; then
              echo "✅ Image exists locally: ghcr.io/${REPO}:${IMAGE_TAG}"
              return 0
            else
              echo "Image not found locally, attempting to pull..."
              # Try to pull the image
              if docker pull ghcr.io/${REPO}:${IMAGE_TAG}; then
                echo "✅ Image pulled successfully: ghcr.io/${REPO}:${IMAGE_TAG}"
                return 0
              else
                echo "❌ Image does not exist or couldn't be pulled: ghcr.io/${REPO}:${IMAGE_TAG}"
                
                # List available images in the registry for debugging
                echo "Available images in the registry:"
                TOKEN=$(echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin 2>&1 | grep -o 'Login Succeeded' || echo "Login Failed")
                
                if [ "$TOKEN" == "Login Succeeded" ]; then
                  echo "Listing available tags for ${REPO}..."
                  curl -s -H "Authorization: Bearer $(echo $GITHUB_TOKEN)" https://ghcr.io/v2/${REPO}/tags/list | grep -o '"tags":\[[^]]*\]' || echo "No tags found or access denied"
                else
                  echo "Failed to authenticate with registry"
                fi
                
                return 1
              fi
            fi
          }

          # Create function for creating and pushing manifests with retries
          create_and_push_manifest() {
            local TAG=$1
            local AMD64_TAG=$2
            local ARM64_TAG=$3
            local MAX_RETRIES=5
            local RETRY=0
            local SUCCESS=false
            
            echo "Verifying both architecture images exist..."
            
            # Verify both images exist
            if ! verify_image_exists "$AMD64_TAG"; then
              echo "AMD64 image not found, cannot create manifest"
              return 1
            fi
            
            if ! verify_image_exists "$ARM64_TAG"; then
              echo "ARM64 image not found, cannot create manifest"
              return 1
            fi
            
            echo "Creating manifest for ${TAG}..."
            
            # List the images that will be used for manifest
            echo "Images that will be used for manifest:"
            echo " - ghcr.io/${REPO}:${AMD64_TAG} (AMD64)"
            echo " - ghcr.io/${REPO}:${ARM64_TAG} (ARM64)"
            
            while [ $RETRY -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
              if docker manifest create --insecure "ghcr.io/${REPO}:${TAG}" \
                "ghcr.io/${REPO}:${AMD64_TAG}" \
                "ghcr.io/${REPO}:${ARM64_TAG}"; then
                
                # Add platform annotations
                docker manifest annotate "ghcr.io/${REPO}:${TAG}" \
                  "ghcr.io/${REPO}:${AMD64_TAG}" --os linux --arch amd64
                  
                docker manifest annotate "ghcr.io/${REPO}:${TAG}" \
                  "ghcr.io/${REPO}:${ARM64_TAG}" --os linux --arch arm64
                
                echo "Manifest for ${TAG} created successfully, now pushing..."
                
                # Push with retry
                PUSH_RETRY=0
                PUSH_SUCCESS=false
                
                while [ $PUSH_RETRY -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = "false" ]; do
                  if docker manifest push --insecure "ghcr.io/${REPO}:${TAG}"; then
                    PUSH_SUCCESS=true
                    SUCCESS=true
                    echo "Successfully pushed manifest for ${TAG}"
                  else
                    PUSH_RETRY=$((PUSH_RETRY+1))
                    if [ $PUSH_RETRY -lt $MAX_RETRIES ]; then
                      echo "Push attempt $PUSH_RETRY failed, retrying in 5 seconds..."
                      sleep 5
                    else
                      echo "Failed to push manifest after $MAX_RETRIES attempts"
                    fi
                  fi
                done
              else
                RETRY=$((RETRY+1))
                if [ $RETRY -lt $MAX_RETRIES ]; then
                  echo "Create attempt $RETRY failed, retrying in 5 seconds..."
                  sleep 5
                else
                  echo "Failed to create manifest after $MAX_RETRIES attempts"
                  echo "The images might not be available or there could be an issue with the registry."
                  # List available tags
                  echo "Available tags for ${REPO}:"
                  docker images "ghcr.io/${REPO}*"
                fi
              fi
            done
            
            if [ "$SUCCESS" = "true" ]; then
              return 0
            else
              return 1
            fi
          }

          # Create manifests for all tag formats
          echo "Creating manifest for version without v prefix: $VERSION_NO_V"
          create_and_push_manifest "$VERSION_NO_V" "${VERSION_NO_V}-amd64" "${VERSION_NO_V}-arm64" || echo "Failed to create manifest for $VERSION_NO_V, continuing..."

          # Only create manifest with v prefix if original version had v prefix
          if [[ "$VERSION" == v* ]]; then
            echo "Creating manifest for version with v prefix: $VERSION"
            create_and_push_manifest "$VERSION" "${VERSION}-amd64" "${VERSION}-arm64" || echo "Failed to create manifest for $VERSION, continuing..."
          fi

          # Create latest manifest
          echo "Creating manifest for latest"
          create_and_push_manifest "latest" "latest-amd64" "latest-arm64" || echo "Failed to create manifest for latest, continuing..."

          echo "Docker manifest creation completed"
