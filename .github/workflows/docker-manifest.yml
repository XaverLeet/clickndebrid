name: Docker Manifest Builder

on:
  repository_dispatch:
    types: [docker-amd64-complete, docker-arm64-complete]

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      amd64-status: ${{ steps.check.outputs.amd64-status }}
      arm64-status: ${{ steps.check.outputs.arm64-status }}
      version: ${{ steps.check.outputs.version }}
      ready: ${{ steps.check.outputs.ready }}

    steps:
      - name: Check build status
        id: check
        run: |
          # Simpler approach - use environment information directly
          # Set default values
          AMD64_STATUS="pending"
          ARM64_STATUS="pending"
          VERSION=""
          READY="false"

          # Set values based on the current event
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Client payload version: ${{ github.event.client_payload.version }}"
          
          # This workflow should only run via repository_dispatch events
          if [ "${{ github.event_name }}" != "repository_dispatch" ]; then
            echo "Not a repository_dispatch event, skipping"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Create the VERSION.txt file if it doesn't exist
          mkdir -p /tmp/clickndebrid-docker-builds
          VERSION_FILE="/tmp/clickndebrid-docker-builds/VERSION.txt"
          if [ ! -f "$VERSION_FILE" ] && [ -n "${{ github.event.client_payload.version }}" ]; then
            echo "${{ github.event.client_payload.version }}" > "$VERSION_FILE"
            echo "Created VERSION file with: ${{ github.event.client_payload.version }}"
          fi
          
          # Read the version from file, or use the event payload version
          if [ -f "$VERSION_FILE" ]; then
            VERSION=$(cat "$VERSION_FILE")
            echo "Read VERSION from file: $VERSION"
          elif [ -n "${{ github.event.client_payload.version }}" ]; then
            VERSION="${{ github.event.client_payload.version }}"
            echo "Using VERSION from event payload: $VERSION"
          else
            echo "No VERSION found"
          fi

          # Create status files if needed
          AMD64_FILE="/tmp/clickndebrid-docker-builds/AMD64_DONE"
          ARM64_FILE="/tmp/clickndebrid-docker-builds/ARM64_DONE"
          
          # Update status based on the event type
          if [ "${{ github.event.action }}" == "docker-amd64-complete" ]; then
            echo "Marking AMD64 as complete"
            echo "$VERSION" > "$AMD64_FILE"
          fi

          if [ "${{ github.event.action }}" == "docker-arm64-complete" ]; then
            echo "Marking ARM64 as complete"
            echo "$VERSION" > "$ARM64_FILE"
          fi

          # Check if all builds are complete
          if [ -f "$AMD64_FILE" ]; then
            AMD64_STATUS="success"
            AMD64_VERSION=$(cat "$AMD64_FILE")
            echo "AMD64 build is complete (version: $AMD64_VERSION)"
          else
            echo "AMD64 build is not complete"
          fi

          if [ -f "$ARM64_FILE" ]; then
            ARM64_STATUS="success"
            ARM64_VERSION=$(cat "$ARM64_FILE")
            echo "ARM64 build is complete (version: $ARM64_VERSION)"
          else
            echo "ARM64 build is not complete"
          fi

          # Set outputs for job conditions
          echo "amd64-status=$AMD64_STATUS" >> $GITHUB_OUTPUT
          echo "arm64-status=$ARM64_STATUS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Determine if we're ready to build the manifest
          if [ "$AMD64_STATUS" == "success" ] && [ "$ARM64_STATUS" == "success" ] && [ -n "$VERSION" ]; then
            echo "Both architectures are ready for version $VERSION, proceeding with manifest creation"
            echo "ready=true" >> $GITHUB_OUTPUT
            
            # Clean up the status files for the next build
            rm -f "$AMD64_FILE" "$ARM64_FILE" "$VERSION_FILE"
            echo "Reset build status for next version"
          else
            echo "Not all conditions met, skipping manifest creation"
            echo "ready=false" >> $GITHUB_OUTPUT
            
            # Show what's missing
            if [ "$AMD64_STATUS" != "success" ]; then
              echo "AMD64 build not complete"
            fi
            if [ "$ARM64_STATUS" != "success" ]; then
              echo "ARM64 build not complete"
            fi
            if [ -z "$VERSION" ]; then
              echo "No version specified"
            fi
          fi

  create-manifest:
    needs: check-build-status
    if: needs.check-build-status.outputs.ready == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO=${REPO}" >> $GITHUB_ENV
          VERSION="${{ needs.check-build-status.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION_NO_V=${VERSION_NO_V}" >> $GITHUB_ENV
          
          # Debug information
          echo "Ready to create manifest: ${{ needs.check-build-status.outputs.ready }}"
          echo "AMD64 status: ${{ needs.check-build-status.outputs.amd64-status }}"
          echo "ARM64 status: ${{ needs.check-build-status.outputs.arm64-status }}"
          echo "Version: ${{ needs.check-build-status.outputs.version }}"

      - name: Create and push Docker manifest
        run: |
          # Enable Docker CLI experimental features
          export DOCKER_CLI_EXPERIMENTAL=enabled

          # Create function for creating and pushing manifests with retries
          create_and_push_manifest() {
            local TAG=$1
            local AMD64_TAG=$2
            local ARM64_TAG=$3
            local MAX_RETRIES=5
            local RETRY=0
            local SUCCESS=false
            
            echo "Creating manifest for ${TAG}..."
            
            while [ $RETRY -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
              if docker manifest create --insecure "ghcr.io/${REPO}:${TAG}" \
                "ghcr.io/${REPO}:${AMD64_TAG}" \
                "ghcr.io/${REPO}:${ARM64_TAG}"; then
                
                # Add platform annotations
                docker manifest annotate "ghcr.io/${REPO}:${TAG}" \
                  "ghcr.io/${REPO}:${AMD64_TAG}" --os linux --arch amd64
                  
                docker manifest annotate "ghcr.io/${REPO}:${TAG}" \
                  "ghcr.io/${REPO}:${ARM64_TAG}" --os linux --arch arm64
                
                # Push with retry
                PUSH_RETRY=0
                PUSH_SUCCESS=false
                
                while [ $PUSH_RETRY -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = "false" ]; do
                  if docker manifest push --insecure "ghcr.io/${REPO}:${TAG}"; then
                    PUSH_SUCCESS=true
                    SUCCESS=true
                    echo "Successfully pushed manifest for ${TAG}"
                  else
                    PUSH_RETRY=$((PUSH_RETRY+1))
                    if [ $PUSH_RETRY -lt $MAX_RETRIES ]; then
                      echo "Push attempt $PUSH_RETRY failed, retrying in 5 seconds..."
                      sleep 5
                    else
                      echo "Failed to push manifest after $MAX_RETRIES attempts"
                    fi
                  fi
                done
              else
                RETRY=$((RETRY+1))
                if [ $RETRY -lt $MAX_RETRIES ]; then
                  echo "Create attempt $RETRY failed, retrying in 5 seconds..."
                  sleep 5
                else
                  echo "Failed to create manifest after $MAX_RETRIES attempts"
                fi
              fi
            done
            
            if [ "$SUCCESS" = "true" ]; then
              return 0
            else
              return 1
            fi
          }

          # Create manifests for all tag formats
          echo "Creating manifest for version without v prefix: $VERSION_NO_V"
          create_and_push_manifest "$VERSION_NO_V" "${VERSION_NO_V}-amd64" "${VERSION_NO_V}-arm64" || echo "Failed to create manifest for $VERSION_NO_V, continuing..."

          # Only create manifest with v prefix if original version had v prefix
          if [[ "$VERSION" == v* ]]; then
            echo "Creating manifest for version with v prefix: $VERSION"
            create_and_push_manifest "$VERSION" "${VERSION}-amd64" "${VERSION}-arm64" || echo "Failed to create manifest for $VERSION, continuing..."
          fi

          # Create latest manifest
          echo "Creating manifest for latest"
          create_and_push_manifest "latest" "latest-amd64" "latest-arm64" || echo "Failed to create manifest for latest, continuing..."

          echo "Docker manifest creation completed"
